clc;
clear all;
close all;
% RC4 ENCRYPTION ALGORITHM
% INITIALISE A STATE VECTOR
S = zeros(1,8);
% GENERATE A KEY VECTOR
%KEY_STRING = 'ECE'
KEY = [1 2 3 4];
K = zeros(1,8);
% GENERATE A PLAIN TEXT OF MESSAGE
%MSG_STRING = 'GAME OF THRONE'
MSG = [2 4 6 7];
KEY_LENGTH = length(KEY);
% PERFORM KEY SCHEDULING ALGORITHM
for p = 1:8
S(p) = p-1;
TEMP = mod(p-1,KEY_LENGTH)+1;
K(p) = KEY(TEMP);
% K(p)

end
% GENERATE CIPHER TEXT
q = 0;
for p = 1:8
q = mod((q+S(p)+K(p)),8)+1;
% q
S([p q]) = S([q p]);
% S([p q])
q=q-1;
end
cipher_text = [];
cipher_text_store = [];
key_stream = [];
% PSEUDO RANDOM GENERATION ALGORITHM (PRGA)
q = 0;
for p = 1:length(MSG)
q = mod((q+S(p+1)),8)+1;
S([p+1 q]) = S([q p+1]);
% S([p+1 q])
TEMP = mod((S(p+1)+S(q)),8);
% TEMP
current_key = S(TEMP+1);
% current_key
key_stream = [key_stream,current_key];
cipher_text(p) = bitxor(MSG(p),current_key)
cipher_text_store = [cipher_text_store,cipher_text];
q=q-1;
end
%cipher_text_string = cipher_text_store
% RC4 DECRYPTION
decrypted_message = [];
decrypted_msg = [];
for p = 1:length(cipher_text)
current_message = bitxor(cipher_text(p),key_stream(p));
decrypted_message = [decrypted_message,current_message];
end
decrypted_output = decrypted_message























