clc 
clear all
close all
N = 10^6; % number of bits or symbols 
SNR = [0:25]; 
for ii = 1:length(SNR) 
ip = rand(1,N)>0.5; 
s = 2*ip-1; 
sCode = zeros(2,N); 
sCode(:,1:2:end) = (1/sqrt(2))*reshape(s,2,N/2); 
sCode(:,2:2:end) = (1/sqrt(2))*(kron(ones(1,N/2),[-1;1]).*flipud(reshape(conj(s),2,N/2))); 
h = 1/sqrt(2)*(randn(1,N) + 1i*randn(1,N)); 
hMod = kron(reshape(h,2,N/2),ones(1,2)); 
n = 1/sqrt(2)*(randn(1,N) + 1i*randn(1,N));
y = sum(hMod.*sCode,1) + 10^(-SNR(ii)/20)*n; 
yMod = kron(reshape(y,2,N/2),ones(1,2)); 
yMod(2,:) = conj(yMod(2,:)); 
hEq = zeros(2,N); 
hEq(:,[1:2:end]) = reshape(h,2,N/2); 
hEq(:,[2:2:end]) = kron(ones(1,N/2),[1;-1]).*flipud(reshape(h,2,N/2)); 
hEq(1,:) = conj(hEq(1,:)); 
hEqPower = sum(hEq.*conj(hEq),1); 
yHat = sum(hEq.*yMod,1)./hEqPower; 
yHat(2:2:end) = conj(yHat(2:2:end)); 
% receiver - hard decision decoding 
ipHat = real(yHat)>0; 
% counting the errors 
nErr(ii) = size(find([ip- ipHat]),2);
end
simBer = nErr/N; % simulated ber 
SNRLin = 10.^(SNR/10); 
pAlamouti = 1/2 - 1/2*(1+2./SNRLin).^(-1/2); 
berAlamouti = pAlamouti.^2.*(1+2*(1-pAlamouti)); 
close all
figure 
semilogy(SNR,berAlamouti,'c+-','LineWidth',2); 
hold on
axis([0 25 10^-5 0.5]) 
grid on
legend('STBC'); 
xlabel('SNR, dB'); 
ylabel('Bit Error Rate'); 
title('Alamouti STBC');


